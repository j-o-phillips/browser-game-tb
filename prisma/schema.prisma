// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  credits        Int       @default(2000)
  currentLoc     String    @default("Arubula")
  currentPos     Int[]     @default([5, 10])
  isLanded       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  ship Ship?
}

model Ship {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @default("Starter Ship")
  maxHull     Int      @default(100)
  currentHull Int      @default(100)
  fuel        Int      @default(100)
  price       Int      @default(10000)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @unique @db.ObjectId

  shipEngine   ShipEngine?
  shipCargoBay ShipCargoBay?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShipEngine {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String   @default("Basic Engine")
  currentDamage   Int      @default(0) // 0 = perfect 100 = broken
  fuelConsumption Int      @default(5)
  speed           Int      @default(1)
  price           Int      @default(5000)
  maxJump         Int      @default(20)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  shipId          String   @unique @db.ObjectId

  Ship Ship @relation(fields: [shipId], references: [id], onDelete: Cascade)
}

model ShipCargoBay {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String   @default("Basic Cargo Bay")
  currentDamage Int      @default(0) // 0 = perfect 100 = broken
  maxCapacity   Int      @default(100)
  price         Int      @default(5000)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  shipId        String   @unique @db.ObjectId

  resources Resource[]

  Ship Ship @relation(fields: [shipId], references: [id], onDelete: Cascade)
}

model System {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  markets Market[]
}

//Position uses an x,y grid of -25 - 25
model Market {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  position  Int[]
  credits   Int      @default(10000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  systemId  String?  @db.ObjectId

  resources     Resource[]
  cronResources Cronresource[]

  System System? @relation(fields: [systemId], references: [id], onDelete: Cascade)
}

model Resource {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  baseValue      Int
  amount         Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  marketId       String?  @db.ObjectId
  shipCargoBayId String?  @db.ObjectId

  Market       Market?       @relation(fields: [marketId], references: [id], onDelete: Cascade)
  ShipCargoBay ShipCargoBay? @relation(fields: [shipCargoBayId], references: [id], onDelete: Cascade)
}

model Cronresource {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  baseValue Int
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  marketId  String?  @db.ObjectId

  Market Market? @relation(fields: [marketId], references: [id], onDelete: Cascade)
}
